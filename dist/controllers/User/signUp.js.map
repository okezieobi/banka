{"version":3,"sources":["../../../controllers/User/signUp.js"],"names":["logic","userSignUp","req","res","body","userFirstName","services","errorResponse","checkName","userLastName","userEmail","validateEmail","userPassword","validatePassword","findOne","data","users","newUser","userData","push","userDataRes","createUserDataResponse","successResponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKAA,eAAMC,UAAN,GAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASC,aAAd,EAA6B,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,wBAAjC,CAAP;AAC7B,MAAI,CAACG,kBAASE,SAAT,CAAmBN,GAAG,CAACE,IAAJ,CAASC,aAA5B,CAAL,EAAiD,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,4BAAjC,CAAP;AACjD,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASK,YAAd,EAA4B,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,uBAAjC,CAAP;AAC5B,MAAI,CAACG,kBAASE,SAAT,CAAmBN,GAAG,CAACE,IAAJ,CAASK,YAA5B,CAAL,EAAgD,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,2BAAjC,CAAP;AAChD,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASM,SAAd,EAAyB,OAAOJ,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,mBAAjC,CAAP;AACzB,MAAI,CAACG,kBAASK,aAAT,CAAuBT,GAAG,CAACE,IAAJ,CAASM,SAAhC,CAAL,EAAiD,OAAOJ,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,uBAAjC,CAAP;AACjD,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASQ,YAAd,EAA4B,OAAON,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,sBAAjC,CAAP;AAC5B,MAAI,CAACG,kBAASO,gBAAT,CAA0BX,GAAG,CAACE,IAAJ,CAASQ,YAAnC,CAAL,EAAuD,OAAON,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,sIAAjC,CAAP;AACvD,MAAIG,kBAASQ,OAAT,CAAiBC,YAAKC,KAAtB,EAA6Bd,GAAG,CAACE,IAAjC,EAAuC,OAAvC,EAAgD,WAAhD,CAAJ,EAAkE,OAAOE,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,6BAAjC,CAAP;;AAClE,MAAMc,OAAO,GAAGF,YAAKG,QAAL,CAAchB,GAAG,CAACE,IAAlB,CAAhB;;AACAW,cAAKC,KAAL,CAAWG,IAAX,CAAgBF,OAAhB;;AACA,MAAMG,WAAW,GAAGL,YAAKM,sBAAL,CAA4BJ,OAA5B,CAApB;;AACA,SAAOX,kBAASgB,eAAT,CAAyBnB,GAAzB,EAA8B,GAA9B,EAAmCiB,WAAnC,CAAP;AACD,CAdD;;eAgBepB,eAAMC,U","sourcesContent":["// @ts-ignore\nimport logic from '../index';\nimport data from '../../db';\nimport services from '../../services';\n\nlogic.userSignUp = (req, res) => {\n  if (!req.body.userFirstName) return services.errorResponse(res, 400, 'First name is required');\n  if (!services.checkName(req.body.userFirstName)) return services.errorResponse(res, 400, 'First name must be letters');\n  if (!req.body.userLastName) return services.errorResponse(res, 400, 'Last name is required');\n  if (!services.checkName(req.body.userLastName)) return services.errorResponse(res, 400, 'Last name must be letters');\n  if (!req.body.userEmail) return services.errorResponse(res, 400, 'Email is required');\n  if (!services.validateEmail(req.body.userEmail)) return services.errorResponse(res, 400, 'Email format is wrong');\n  if (!req.body.userPassword) return services.errorResponse(res, 400, 'Password is required');\n  if (!services.validatePassword(req.body.userPassword)) return services.errorResponse(res, 400, 'Password must be eight characters minimum, at least one uppercase letter, one lowercase letter, one number and one special character');\n  if (services.findOne(data.users, req.body, 'email', 'userEmail')) return services.errorResponse(res, 400, 'User exists, please sign in');\n  const newUser = data.userData(req.body);\n  data.users.push(newUser);\n  const userDataRes = data.createUserDataResponse(newUser);\n  return services.successResponse(res, 201, userDataRes);\n};\n\nexport default logic.userSignUp;\n"],"file":"signUp.js"}