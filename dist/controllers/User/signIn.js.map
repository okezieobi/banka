{"version":3,"sources":["../../../controllers/User/signIn.js"],"names":["logic","userSignIn","req","res","body","userEmail","services","errorResponse","validateEmail","userPassword","validatePassword","registeredUser","findOne","data","users","password","responseUserData","createUserDataResponse","successResponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKAA,eAAMC,UAAN,GAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASC,SAAd,EAAyB,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,mBAAjC,CAAP;AACzB,MAAI,CAACG,kBAASE,aAAT,CAAuBN,GAAG,CAACE,IAAJ,CAASC,SAAhC,CAAL,EAAiD,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,uBAAjC,CAAP;AACjD,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASK,YAAd,EAA4B,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,sBAAjC,CAAP;AAC5B,MAAI,CAACG,kBAASI,gBAAT,CAA0BR,GAAG,CAACE,IAAJ,CAASK,YAAnC,CAAL,EAAuD,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,sIAAjC,CAAP;;AACvD,MAAMQ,cAAc,GAAGL,kBAASM,OAAT,CAAiBC,YAAKC,KAAtB,EAA6BZ,GAAG,CAACE,IAAjC,EAAuC,OAAvC,EAAgD,WAAhD,CAAvB;;AACA,MAAI,CAACO,cAAL,EAAqB,OAAOL,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,qCAAjC,CAAP;AACrB,MAAIQ,cAAc,CAACI,QAAf,KAA4Bb,GAAG,CAACE,IAAJ,CAASK,YAAzC,EAAuD,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,8BAAjC,CAAP;;AACvD,MAAMa,gBAAgB,GAAGH,YAAKI,sBAAL,CAA4BN,cAA5B,CAAzB;;AACA,SAAOL,kBAASY,eAAT,CAAyBf,GAAzB,EAA8B,GAA9B,EAAmCa,gBAAnC,CAAP;AACD,CAVD;;eAYehB,eAAMC,U","sourcesContent":["// @ts-ignore\nimport logic from '../index';\nimport data from '../../db';\nimport services from '../../services';\n\nlogic.userSignIn = (req, res) => {\n  if (!req.body.userEmail) return services.errorResponse(res, 400, 'Email is required');\n  if (!services.validateEmail(req.body.userEmail)) return services.errorResponse(res, 400, 'Email format is wrong');\n  if (!req.body.userPassword) return services.errorResponse(res, 400, 'Password is required');\n  if (!services.validatePassword(req.body.userPassword)) return services.errorResponse(res, 400, 'Password must be eight characters minimum, at least one uppercase letter, one lowercase letter, one number and one special character');\n  const registeredUser = services.findOne(data.users, req.body, 'email', 'userEmail');\n  if (!registeredUser) return services.errorResponse(res, 400, 'User does not exist, please sign up');\n  if (registeredUser.password !== req.body.userPassword) return services.errorResponse(res, 400, 'Password does not match user');\n  const responseUserData = data.createUserDataResponse(registeredUser);\n  return services.successResponse(res, 200, responseUserData);\n};\n\nexport default logic.userSignIn;\n"],"file":"signIn.js"}