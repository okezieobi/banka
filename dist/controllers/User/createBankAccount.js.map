{"version":3,"sources":["../../../controllers/User/createBankAccount.js"],"names":["logic","createBankAccount","req","res","headers","services","errorResponse","checkNumber","body","bankAccountType","checkName","findUser","findById","data","users","newBankAccount","bankAccount","bankAccountRes","createBankAccountResponse","successResponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKAA,eAAMC,iBAAN,GAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAI,CAACD,GAAG,CAACE,OAAJ,CAAY,UAAZ,CAAL,EAA8B,OAAOC,kBAASC,aAAT,CAAuBH,GAAvB,EAA4B,GAA5B,EAAiC,qBAAjC,CAAP;AAC9B,MAAI,CAACE,kBAASE,WAAT,CAAqBL,GAAG,CAACE,OAAJ,CAAY,UAAZ,CAArB,CAAL,EAAoD,OAAOC,kBAASC,aAAT,CAAuBH,GAAvB,EAA4B,GAA5B,EAAiC,yBAAjC,CAAP;AACpD,MAAI,CAACD,GAAG,CAACM,IAAJ,CAASC,eAAd,EAA+B,OAAOJ,kBAASC,aAAT,CAAuBH,GAAvB,EAA4B,GAA5B,EAAiC,+BAAjC,CAAP;AAC/B,MAAI,CAACE,kBAASK,SAAT,CAAmBR,GAAG,CAACM,IAAJ,CAASC,eAA5B,CAAL,EAAmD,OAAOJ,kBAASC,aAAT,CAAuBH,GAAvB,EAA4B,GAA5B,EAAiC,mCAAjC,CAAP;AACnD,MAAID,GAAG,CAACM,IAAJ,CAASC,eAAT,KAA6B,SAA7B,IAA0CP,GAAG,CAACM,IAAJ,CAASC,eAAT,KAA6B,SAAvE,IACCP,GAAG,CAACM,IAAJ,CAASC,eAAT,KAA6B,SAD9B,IAC2CP,GAAG,CAACM,IAAJ,CAASC,eAAT,KAA6B,SAD5E,EACuF,OAAOJ,kBAASC,aAAT,CAAuBH,GAAvB,EAA4B,GAA5B,EAAiC,8CAAjC,CAAP;;AACvF,MAAMQ,QAAQ,GAAGN,kBAASO,QAAT,CAAkBC,YAAKC,KAAvB,EAA8BZ,GAAG,CAACE,OAAlC,EAA2C,IAA3C,EAAiD,UAAjD,CAAjB;;AACA,MAAI,CAACO,QAAL,EAAe,OAAON,kBAASC,aAAT,CAAuBH,GAAvB,EAA4B,GAA5B,EAAiC,gEAAjC,CAAP;;AACf,MAAMY,cAAc,GAAGF,YAAKG,WAAL,CAAiBd,GAAG,CAACM,IAArB,CAAvB;;AACA,MAAMS,cAAc,GAAGJ,YAAKK,yBAAL,CAA+BH,cAA/B,EAA+CJ,QAA/C,CAAvB;;AACA,SAAON,kBAASc,eAAT,CAAyBhB,GAAzB,EAA8B,GAA9B,EAAmCc,cAAnC,CAAP;AACD,CAZD;;eAcejB,eAAMC,iB","sourcesContent":["// @ts-ignore\nimport logic from '../index';\nimport data from '../../db';\nimport services from '../../services';\n\nlogic.createBankAccount = (req, res) => {\n  if (!req.headers['owner-id']) return services.errorResponse(res, 400, 'User Id is required');\n  if (!services.checkNumber(req.headers['owner-id'])) return services.errorResponse(res, 400, 'User id must be numbers');\n  if (!req.body.bankAccountType) return services.errorResponse(res, 400, 'Bank account type is required');\n  if (!services.checkName(req.body.bankAccountType)) return services.errorResponse(res, 400, 'Bank account type must be letters');\n  if (req.body.bankAccountType !== 'current' && req.body.bankAccountType !== 'savings'\n    && req.body.bankAccountType !== 'Current' && req.body.bankAccountType !== 'Savings') return services.errorResponse(res, 400, 'Bank account type must be savings or current');\n  const findUser = services.findById(data.users, req.headers, 'id', 'owner-id');\n  if (!findUser) return services.errorResponse(res, 400, 'Only registered users can create bank accounts, please sign up');\n  const newBankAccount = data.bankAccount(req.body);\n  const bankAccountRes = data.createBankAccountResponse(newBankAccount, findUser);\n  return services.successResponse(res, 201, bankAccountRes);\n};\n\nexport default logic.createBankAccount;\n"],"file":"createBankAccount.js"}