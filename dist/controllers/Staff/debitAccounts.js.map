{"version":3,"sources":["../../../controllers/Staff/debitAccounts.js"],"names":["logic","debitAccount","req","res","body","transactionAmount","services","errorResponse","checkNumber","params","account_number","headers","findAccountNumber","findById","data","bankAccounts","verifyCashier","staff","accountBalance","balance","newTransaction","debitAccountTransaction","responseTransaction","transactionResponse","parseFloat","successResponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKAA,eAAMC,YAAN,GAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASC,iBAAd,EAAiC,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,gCAAjC,CAAP;AACjC,MAAI,CAACG,kBAASE,WAAT,CAAqBN,GAAG,CAACE,IAAJ,CAASC,iBAA9B,CAAL,EAAuD,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,oCAAjC,CAAP;AACvD,MAAI,CAACG,kBAASE,WAAT,CAAqBN,GAAG,CAACO,MAAJ,CAAWC,cAAhC,CAAL,EAAsD,OAAOJ,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,gCAAjC,CAAP;AACtD,MAAI,CAACD,GAAG,CAACS,OAAJ,CAAY,YAAZ,CAAL,EAAgC,OAAOL,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,wBAAjC,CAAP;AAChC,MAAI,CAACG,kBAASE,WAAT,CAAqBN,GAAG,CAACS,OAAJ,CAAY,YAAZ,CAArB,CAAL,EAAsD,OAAOL,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,4BAAjC,CAAP;;AACtD,MAAMS,iBAAiB,GAAGN,kBAASO,QAAT,CAAkBC,YAAKC,YAAvB,EAAqCb,GAAG,CAACO,MAAzC,EAAiD,eAAjD,EAAkE,gBAAlE,CAA1B;;AACA,MAAMO,aAAa,GAAGV,kBAASO,QAAT,CAAkBC,YAAKG,KAAvB,EAA8Bf,GAAG,CAACS,OAAlC,EAA2C,IAA3C,EAAiD,YAAjD,CAAtB;;AACA,MAAI,CAACC,iBAAL,EAAwB,OAAON,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,0BAAjC,CAAP;AACxB,MAAI,CAACa,aAAL,EAAoB,OAAOV,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,4EAAjC,CAAP;AACpBD,EAAAA,GAAG,CAACO,MAAJ,CAAWS,cAAX,GAA4BN,iBAAiB,CAACO,OAA9C;;AACA,MAAMC,cAAc,GAAGN,YAAKO,uBAAL,CAA6BnB,GAAG,CAACE,IAAjC,EAAuCF,GAAG,CAACO,MAA3C,EAAmDP,GAAG,CAACS,OAAvD,CAAvB;;AACA,MAAMW,mBAAmB,GAAGR,YAAKS,mBAAL,CAAyBH,cAAzB,CAA5B;;AACAR,EAAAA,iBAAiB,CAACO,OAAlB,IAA6BK,UAAU,CAACtB,GAAG,CAACE,IAAJ,CAASC,iBAAV,CAAvC;AACA,SAAOC,kBAASmB,eAAT,CAAyBtB,GAAzB,EAA8B,GAA9B,EAAmCmB,mBAAnC,CAAP;AACD,CAfD;;eAiBetB,eAAMC,Y","sourcesContent":["// @ts-ignore\nimport logic from '../index';\nimport data from '../../db';\nimport services from '../../services';\n\nlogic.debitAccount = (req, res) => {\n  if (!req.body.transactionAmount) return services.errorResponse(res, 400, 'Transaction amount is required');\n  if (!services.checkNumber(req.body.transactionAmount)) return services.errorResponse(res, 400, 'Transaction amount must be numbers');\n  if (!services.checkNumber(req.params.account_number)) return services.errorResponse(res, 400, 'Account number must be numbers');\n  if (!req.headers['cashier-id']) return services.errorResponse(res, 400, 'Cashier id is required');\n  if (!services.checkNumber(req.headers['cashier-id'])) return services.errorResponse(res, 400, 'Cashier id must be numbers');\n  const findAccountNumber = services.findById(data.bankAccounts, req.params, 'accountNumber', 'account_number');\n  const verifyCashier = services.findById(data.staff, req.headers, 'id', 'cashier-id');\n  if (!findAccountNumber) return services.errorResponse(res, 404, 'Account number not found');\n  if (!verifyCashier) return services.errorResponse(res, 404, 'Staff not found, only registered staff can debit or credit an bank account');\n  req.params.accountBalance = findAccountNumber.balance;\n  const newTransaction = data.debitAccountTransaction(req.body, req.params, req.headers);\n  const responseTransaction = data.transactionResponse(newTransaction);\n  findAccountNumber.balance -= parseFloat(req.body.transactionAmount);\n  return services.successResponse(res, 201, responseTransaction);\n};\n\nexport default logic.debitAccount;\n"],"file":"debitAccounts.js"}