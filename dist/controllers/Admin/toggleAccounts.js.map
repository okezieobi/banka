{"version":3,"sources":["../../../controllers/Admin/toggleAccounts.js"],"names":["logic","toggleAccountState","req","res","body","accountStatus","services","errorResponse","checkName","headers","checkNumber","findById","data","admins","params","account_number","bankAccount","bankAccounts","status","statusResponse","updateAccountStatus","successResponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKAA,eAAMC,kBAAN,GAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAI,CAACD,GAAG,CAACE,IAAJ,CAASC,aAAd,EAA6B,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,4BAAjC,CAAP;AAC7B,MAAI,CAACG,kBAASE,SAAT,CAAmBN,GAAG,CAACE,IAAJ,CAASC,aAA5B,CAAL,EAAiD,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,gCAAjC,CAAP;AACjD,MAAID,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,QAA3B,IAAuCH,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,QAAlE,IACKH,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,SADhC,IAC6CH,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,SAD5E,EACuF,OAAOC,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,6CAAjC,CAAP;AACvF,MAAI,CAACD,GAAG,CAACO,OAAJ,CAAY,UAAZ,CAAL,EAA8B,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,sBAAjC,CAAP;AAC9B,MAAI,CAACG,kBAASI,WAAT,CAAqBR,GAAG,CAACO,OAAJ,CAAY,UAAZ,CAArB,CAAL,EAAoD,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,0BAAjC,CAAP;AACpD,MAAI,CAACG,kBAASK,QAAT,CAAkBC,YAAKC,MAAvB,EAA+BX,GAAG,CAACO,OAAnC,EAA4C,IAA5C,EAAkD,UAAlD,CAAL,EAAoE,OAAOH,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,yEAAjC,CAAP;AACpE,MAAI,CAACG,kBAASI,WAAT,CAAqBR,GAAG,CAACY,MAAJ,CAAWC,cAAhC,CAAL,EAAsD,OAAOT,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,iCAAjC,CAAP;;AACtD,MAAMa,WAAW,GAAGV,kBAASK,QAAT,CAAkBC,YAAKK,YAAvB,EAAqCf,GAAG,CAACY,MAAzC,EAAiD,eAAjD,EAAkE,gBAAlE,CAApB;;AACA,MAAI,CAACE,WAAL,EAAkB,OAAOV,kBAASC,aAAT,CAAuBJ,GAAvB,EAA4B,GAA5B,EAAiC,0BAAjC,CAAP;AAClBa,EAAAA,WAAW,CAACE,MAAZ,GAAqBhB,GAAG,CAACE,IAAJ,CAASC,aAA9B;;AACA,MAAMc,cAAc,GAAGP,YAAKQ,mBAAL,CAAyBJ,WAAzB,CAAvB;;AACA,SAAOV,kBAASe,eAAT,CAAyBlB,GAAzB,EAA8B,GAA9B,EAAmCgB,cAAnC,CAAP;AACD,CAdD;;eAgBenB,eAAMC,kB","sourcesContent":["// @ts-ignore\nimport logic from '../index';\nimport data from '../../db';\nimport services from '../../services';\n\nlogic.toggleAccountState = (req, res) => {\n  if (!req.body.accountStatus) return services.errorResponse(res, 400, 'Account status is required');\n  if (!services.checkName(req.body.accountStatus)) return services.errorResponse(res, 400, 'Account status must be letters');\n  if (req.body.accountStatus !== 'active' && req.body.accountStatus !== 'Active'\n        && req.body.accountStatus !== 'dormant' && req.body.accountStatus !== 'Dormant') return services.errorResponse(res, 400, 'Account status must equal active or dormant');\n  if (!req.headers['admin-id']) return services.errorResponse(res, 400, 'Admin id is required');\n  if (!services.checkNumber(req.headers['admin-id'])) return services.errorResponse(res, 400, 'Admin id must be numbers');\n  if (!services.findById(data.admins, req.headers, 'id', 'admin-id')) return services.errorResponse(res, 404, 'Admin id not found, only registered admins can update an account detail');\n  if (!services.checkNumber(req.params.account_number)) return services.errorResponse(res, 400, 'Account number must be a number');\n  const bankAccount = services.findById(data.bankAccounts, req.params, 'accountNumber', 'account_number');\n  if (!bankAccount) return services.errorResponse(res, 404, 'Account number not found');\n  bankAccount.status = req.body.accountStatus;\n  const statusResponse = data.updateAccountStatus(bankAccount);\n  return services.successResponse(res, 200, statusResponse);\n};\n\nexport default logic.toggleAccountState;\n"],"file":"toggleAccounts.js"}