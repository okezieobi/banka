{"version":3,"sources":["../../../controllers/Admin/toggleAccounts.js"],"names":["logic","toggleAccountState","req","res","body","accountStatus","services","errorResponse","checkName","headers","checkNumber","findById","data","admins","params","account_number","bankAccount","bankAccounts","status","statusResponse","updateAccountStatus","successResponse"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKAA,eAAMC,kBAAN,GAA2B,UAAEC,GAAF,EAAOC,GAAP,EAAgB;AACvC,MAAK,CAACD,GAAG,CAACE,IAAJ,CAASC,aAAf,EAA+B,OAAOC,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,4BAAlC,CAAP;AAC/B,MAAK,CAACG,kBAASE,SAAT,CAAoBN,GAAG,CAACE,IAAJ,CAASC,aAA7B,CAAN,EAAqD,OAAOC,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,gCAAlC,CAAP;AACrD,MAAKD,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,QAA3B,IAAuCH,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,QAAlE,IACDH,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,SAD1B,IACuCH,GAAG,CAACE,IAAJ,CAASC,aAAT,KAA2B,SADvE,EACmF,OAAOC,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,6CAAlC,CAAP;AACnF,MAAK,CAACD,GAAG,CAACO,OAAJ,CAAa,UAAb,CAAN,EAAkC,OAAOH,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,sBAAlC,CAAP;AAClC,MAAK,CAACG,kBAASI,WAAT,CAAsBR,GAAG,CAACO,OAAJ,CAAa,UAAb,CAAtB,CAAN,EAA0D,OAAOH,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,0BAAlC,CAAP;AAC1D,MAAK,CAACG,kBAASK,QAAT,CAAmBC,YAAKC,MAAxB,EAAgCX,GAAG,CAACO,OAApC,EAA6C,IAA7C,EAAmD,UAAnD,CAAN,EAAwE,OAAOH,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,yEAAlC,CAAP;AACxE,MAAK,CAACG,kBAASI,WAAT,CAAsBR,GAAG,CAACY,MAAJ,CAAWC,cAAjC,CAAN,EAA0D,OAAOT,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,iCAAlC,CAAP;;AAC1D,MAAMa,WAAW,GAAGV,kBAASK,QAAT,CAAmBC,YAAKK,YAAxB,EAAsCf,GAAG,CAACY,MAA1C,EAAkD,eAAlD,EAAmE,gBAAnE,CAApB;;AACA,MAAK,CAACE,WAAN,EAAoB,OAAOV,kBAASC,aAAT,CAAwBJ,GAAxB,EAA6B,GAA7B,EAAkC,0BAAlC,CAAP;AACpBa,EAAAA,WAAW,CAACE,MAAZ,GAAqBhB,GAAG,CAACE,IAAJ,CAASC,aAA9B;;AACA,MAAMc,cAAc,GAAGP,YAAKQ,mBAAL,CAA0BJ,WAA1B,CAAvB;;AACA,SAAOV,kBAASe,eAAT,CAA0BlB,GAA1B,EAA+B,GAA/B,EAAoCgB,cAApC,CAAP;AACH,CAdD;;eAgBenB,eAAMC,kB","sourcesContent":["// @ts-ignore\nimport logic from '../index';\nimport data from '../../db';\nimport services from '../../services';\n\nlogic.toggleAccountState = ( req, res ) => {\n    if ( !req.body.accountStatus ) return services.errorResponse( res, 400, 'Account status is required' );\n    if ( !services.checkName( req.body.accountStatus ) ) return services.errorResponse( res, 400, 'Account status must be letters' );\n    if ( req.body.accountStatus !== 'active' && req.body.accountStatus !== 'Active' &&\n        req.body.accountStatus !== 'dormant' && req.body.accountStatus !== 'Dormant' ) return services.errorResponse( res, 400, 'Account status must equal active or dormant' );\n    if ( !req.headers[ 'admin-id' ] ) return services.errorResponse( res, 400, 'Admin id is required' );\n    if ( !services.checkNumber( req.headers[ 'admin-id' ] ) ) return services.errorResponse( res, 400, 'Admin id must be numbers' );\n    if ( !services.findById( data.admins, req.headers, 'id', 'admin-id' ) ) return services.errorResponse( res, 404, 'Admin id not found, only registered admins can update an account detail' );\n    if ( !services.checkNumber( req.params.account_number ) ) return services.errorResponse( res, 400, 'Account number must be a number' );\n    const bankAccount = services.findById( data.bankAccounts, req.params, 'accountNumber', 'account_number' );\n    if ( !bankAccount ) return services.errorResponse( res, 404, 'Account number not found' );\n    bankAccount.status = req.body.accountStatus;\n    const statusResponse = data.updateAccountStatus( bankAccount );\n    return services.successResponse( res, 200, statusResponse );\n};\n\nexport default logic.toggleAccountState;\n"],"file":"toggleAccounts.js"}