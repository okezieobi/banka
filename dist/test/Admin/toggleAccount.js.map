{"version":3,"sources":["../../../test/Admin/toggleAccount.js"],"names":["chai","use","chaiHttp","describe","it","testData","accountStatus","testHeader","accountNumber","request","app","patch","set","send","response","to","have","status","body","be","an","property","equal","data","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n} from '../index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoints at \"/api/v1/account/account_number\" to toggle the status of a bank account as a signed in Admin with PATCH', () => {\n  it('Should patch the status of a bank account as a signed in Admin at \"/api/v1/account/account_number\" with POST if all request inputs, headers and params are valid', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(200);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(200);\n    expect(response.body).to.have.property('data');\n    expect(response.body.data).to.have.property('accountNumber');\n    expect(response.body.data).to.have.property('status').equal(testData.accountStatus);\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account status is undefined', async () => {\n    const testData = {\n      accountStatus: undefined,\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account status is required');\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account status is an empty string', async () => {\n    const testData = {\n      accountStatus: '',\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account status is required');\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account status is null', async () => {\n    const testData = {\n      accountStatus: null,\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account status is required');\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account status does not exist', async () => {\n    const testData = {};\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account status is required');\n  });\n\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account status are not letters', async () => {\n    const testData = {\n      accountStatus: '12345@45',\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account status must be letters');\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account status does not equal active or dormant', async () => {\n    const testData = {\n      accountStatus: 'activ',\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account status must equal active or dormant');\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if admin id is an empty string', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = '';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Admin id is required');\n  });\n\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number/credit\" if admin id is not a number', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = 'lmaooooooooooo';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Admin id must be numbers');\n  });\n\n\n  it('Should NOT patch the status of a bank account as a signed in Staff at \"/api/v1/account/:account_number\" if admin id is not a number', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = null;\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Admin id must be numbers');\n  });\n\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if admin id is not found', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = '505050505000000';\n    const accountNumber = '1313131313';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Admin id not found, only registered admins can update an account detail');\n  });\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account number is not number', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = '5050505050';\n    const accountNumber = 'lmaooooooooooo';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account number must be a number');\n  });\n\n\n  it('Should NOT patch the status of a bank account as a signed in Admin at \"/api/v1/account/:account_number\" if account number is not found', async () => {\n    const testData = {\n      accountStatus: 'active',\n    };\n    const testHeader = '5050505050';\n    const accountNumber = '338383838383';\n    const response = await chai.request(app).patch(`/api/v1/account/${accountNumber}`).set('admin-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Account number not found');\n  });\n});\n"],"file":"toggleAccount.js"}