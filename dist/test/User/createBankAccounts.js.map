{"version":3,"sources":["../../../test/User/createBankAccounts.js"],"names":["chai","use","chaiHttp","describe","it","testData","bankAccountType","testHeader","request","app","post","set","send","response","to","have","status","body","be","an","property","equal","data","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n} from '../index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoints at \"/api/v1/accounts\" to create a bank account as a signed in User with POST', () => {\n  it('Should create a bank account as a signed in User at \"/api/v1/accounts\" with POST if all request inputs are valid', async () => {\n    const testData = {\n      bankAccountType: 'Savings',\n    };\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(201);\n    expect(response.body).to.have.property('data');\n    expect(response.body.data).to.have.property('accountNumber');\n    expect(response.body.data).to.have.property('firstName');\n    expect(response.body.data).to.have.property('lastName');\n    expect(response.body.data).to.have.property('email');\n    expect(response.body.data).to.have.property('openingBalance');\n    expect(response.body.data).to.have.property('type').equal(testData.bankAccountType);\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id is an empty string', async () => {\n    const testData = {\n      bankAccountType: 'Savings',\n    };\n\n    const testHeader = '';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User Id is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id is not a number', async () => {\n    const testData = {\n      bankAccountType: 'Savings',\n    };\n\n    const testHeader = 'hahahwhatajoke@me';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User id must be numbers');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id is null', async () => {\n    const testData = {\n      bankAccountType: 'Savings',\n    };\n\n    const testHeader = null;\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User id must be numbers');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type is undefined ', async () => {\n    const testData = {\n      bankAccountType: undefined,\n    };\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type is an empty string ', async () => {\n    const testData = {\n      bankAccountType: '',\n    };\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type is null', async () => {\n    const testData = {\n      bankAccountType: null,\n    };\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type does not exist', async () => {\n    const testData = {};\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type are not letters', async () => {\n    const testData = {\n      bankAccountType: '1234@567',\n    };\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type must be letters');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type does not equal \"Savings\" or \"savings\" or \"Current\" or \"current\" ', async () => {\n    const testData = {\n      bankAccountType: 'SavingCurren',\n    };\n\n    const testHeader = '1010101010';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type must be savings or current');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user is not registered', async () => {\n    const testData = {\n      bankAccountType: 'Savings',\n    };\n\n    const testHeader = '101010101000';\n    const response = await chai.request(app).post('/api/v1/accounts').set('owner-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Only registered users can create bank accounts, please sign up');\n  });\n});\n"],"file":"createBankAccounts.js"}