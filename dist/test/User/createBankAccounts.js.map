{"version":3,"sources":["../../../test/User/createBankAccounts.js"],"names":["chai","use","chaiHttp","describe","it","testData","ownerId","bankAccountType","request","app","post","send","response","to","have","status","body","be","an","property","equal","data","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n} from '../index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoints at \"/api/v1/accounts\" to create a bank account as a signed in User with POST', () => {\n  it('Should create a bank account as a signed in User at \"/api/v1/accounts\" with POST if all request inputs are valid', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(201);\n    expect(response.body).to.have.property('data');\n    expect(response.body.data).to.have.property('accountNumber');\n    expect(response.body.data).to.have.property('firstName');\n    expect(response.body.data).to.have.property('lastName');\n    expect(response.body.data).to.have.property('email');\n    expect(response.body.data).to.have.property('openingBalance');\n    expect(response.body.data).to.have.property('type').equal(testData.bankAccountType);\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if owner or user id is undefined', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.ownerId = undefined;\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User Id is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id is an empty string', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.ownerId = '';\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User Id is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id is null', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.ownerId = null;\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User Id is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id does not exist', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    delete testData.ownerId;\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User Id is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user or owner id is not a number', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.ownerId = 'udhdsu@dfg';\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('User id must be numbers');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type is undefined ', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.bankAccountType = undefined;\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type is an empty string ', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.bankAccountType = '';\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type is null', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.bankAccountType = null;\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type does not exist', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    delete testData.bankAccountType;\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type is required');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type are not letters', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.bankAccountType = 'Savings123';\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type must be letters');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if bank account type does not equal \"Savings\" or \"savings\" or \"Current\" or \"current\" ', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.bankAccountType = 'saving';\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Bank account type must be savings or current');\n  });\n\n  it('Should NOT create a bank account as a signed in User at \"/api/v1/accounts\" if user is not registered', async () => {\n    const testData = {\n      ownerId: '1010101010',\n      bankAccountType: 'Savings',\n    };\n    testData.ownerId = '20303930930';\n    const response = await chai.request(app).post('/api/v1/accounts').send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Only registered users can create bank accounts, please sign up');\n  });\n});\n"],"file":"createBankAccounts.js"}