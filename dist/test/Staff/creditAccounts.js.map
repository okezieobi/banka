{"version":3,"sources":["../../../test/Staff/creditAccounts.js"],"names":["chai","use","chaiHttp","describe","it","testData","transactionAmount","testHeader","accountNumber","request","app","post","set","send","response","to","have","status","body","be","an","property","equal","data","parseFloat","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n} from '../index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoints at \"/api/v1/transactions/:account_number/credit\" to credit a bank account with an amount as a signed in Staff with POST', () => {\n  it('Should credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" with POST if all request inputs, headers and params are valid', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(201);\n    expect(response.body).to.have.property('data');\n    expect(response.body.data).to.have.property('accountNumber');\n    expect(response.body.data).to.have.property('transactionId');\n    expect(response.body.data).to.have.property('amount').equal(parseFloat(testData.transactionAmount));\n    expect(response.body.data).to.have.property('cashier');\n    expect(response.body.data).to.have.property('transactionType');\n    expect(response.body.data).to.have.property('accountBalance');\n  });\n\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if transaction amount is undefined', async () => {\n    const testData = {\n      transactionAmount: undefined,\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if transaction amount is an empty string', async () => {\n    const testData = {\n      transactionAmount: '',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if transaction amount is null', async () => {\n    const testData = {\n      transactionAmount: null,\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if transaction amount does not exist', async () => {\n    const testData = {};\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if transaction amount is not a number', async () => {\n    const testData = {\n      transactionAmount: 'haha@Iamlaffing123',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount must be numbers');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if cashier id is an empty string', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id is required');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if cashier id is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = 'hahah@again';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id must be numbers');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if cashier id is null', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = null;\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id must be numbers');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if cashier id is not registered', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030303030300';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Staff not found, only registered staff can debit or credit a bank account');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if account number is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = 'hahah@llslsl';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account number must be numbers');\n  });\n\n  it('Should NOT credit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/credit\" if account number is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '12121212128888';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/credit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Account number not found');\n  });\n});\n"],"file":"creditAccounts.js"}