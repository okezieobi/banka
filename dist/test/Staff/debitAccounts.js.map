{"version":3,"sources":["../../../test/Staff/debitAccounts.js"],"names":["chai","use","chaiHttp","describe","it","testData","transactionAmount","testHeader","accountNumber","request","app","post","set","send","response","to","have","status","body","be","an","property","equal","data","parseFloat","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n} from '../index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoints at \"/api/v1/transactions/:account_number/debit\" to debit a bank account with an amount as a signed in Staff with POST', () => {\n  it('Should debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" with POST if all request inputs, headers and params are valid', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(201);\n    expect(response.body).to.have.property('data');\n    expect(response.body.data).to.have.property('accountNumber');\n    expect(response.body.data).to.have.property('transactionId');\n    expect(response.body.data).to.have.property('amount').equal(parseFloat(testData.transactionAmount));\n    expect(response.body.data).to.have.property('cashier');\n    expect(response.body.data).to.have.property('transactionType');\n    expect(response.body.data).to.have.property('accountBalance');\n  });\n\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if transaction amount is undefined', async () => {\n    const testData = {\n      transactionAmount: undefined,\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if transaction amount is an empty string', async () => {\n    const testData = {\n      transactionAmount: '',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if transaction amount is null', async () => {\n    const testData = {\n      transactionAmount: null,\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if transaction amount does not exist', async () => {\n    const testData = {};\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if transaction amount is not a number', async () => {\n    const testData = {\n      transactionAmount: 'haha@Iamlaffing123',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if cashier id is an empty string', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if cashier id is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = 'hahah@again';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if cashier id is null', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = null;\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if cashier id is not registered', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030303030300';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Staff not found, only registered staff can debit or credit a bank account');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if account number is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = 'hahah@llslsl';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account number must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/:transactions/:account_number/debit\" if account number is not found', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '12121212128888';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Account number not found');\n  });\n});\n"],"file":"debitAccounts.js"}