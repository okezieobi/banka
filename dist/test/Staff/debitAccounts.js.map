{"version":3,"sources":["../../../test/Staff/debitAccounts.js"],"names":["chai","use","chaiHttp","describe","it","testData","transactionAmount","testHeader","accountNumber","request","app","post","set","send","response","to","have","status","body","be","an","property","equal","data","parseFloat","undefined"],"mappings":"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","sourcesContent":["import {\n  expect,\n  chai,\n  chaiHttp,\n  app,\n} from '../index';\n\nchai.use(chaiHttp);\n\ndescribe('Test endpoints at \"/api/v1/transactions/:account_number/debit\" to debit a bank account with an amount as a signed in Staff with POST', () => {\n  it('Should debit a bank account with an amount as a signed in Staff at \"/api/v1/transactions/:account_number/debit\" with POST if all request inputs, headers and params are valid', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(201);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(201);\n    expect(response.body).to.have.property('data');\n    expect(response.body.data).to.have.property('accountNumber');\n    expect(response.body.data).to.have.property('transactionId');\n    expect(response.body.data).to.have.property('amount').equal(parseFloat(testData.transactionAmount));\n    expect(response.body.data).to.have.property('cashier');\n    expect(response.body.data).to.have.property('transactionType');\n    expect(response.body.data).to.have.property('accountBalance');\n  });\n\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if transaction amount is undefined', async () => {\n    const testData = {\n      transactionAmount: undefined,\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if transaction amount is an empty string', async () => {\n    const testData = {\n      transactionAmount: '',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if transaction amount is null', async () => {\n    const testData = {\n      transactionAmount: null,\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if transaction amount does not exist', async () => {\n    const testData = {};\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if transaction amount is not a number', async () => {\n    const testData = {\n      transactionAmount: 'haha@Iamlaffing123',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Transaction amount must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if cashier id is an empty string', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id is required');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if cashier id is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = 'hahah@again';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if cashier id is null', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = null;\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Cashier id must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if cashier id is not registered', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030303030300';\n    const accountNumber = '1212121212';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Staff not found, only registered staff can debit or credit an bank account');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if account number is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = 'hahah@llslsl';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(400);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(400);\n    expect(response.body).to.have.property('error').equal('Account number must be numbers');\n  });\n\n  it('Should NOT debit a bank account with an amount as a signed in Staff at \"/api/v1/accounts\" if account number is not a number', async () => {\n    const testData = {\n      transactionAmount: '1000',\n    };\n    const testHeader = '3030303030';\n    const accountNumber = '12121212128888';\n    const response = await chai.request(app).post(`/api/v1/transactions/${accountNumber}/debit`).set('cashier-id', testHeader).send(testData);\n    expect(response).to.have.status(404);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('status').equal(404);\n    expect(response.body).to.have.property('error').equal('Account number not found');\n  });\n});\n"],"file":"debitAccounts.js"}