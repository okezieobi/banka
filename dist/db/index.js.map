{"version":3,"sources":["../../db/index.js"],"names":["Banka","users","bankAccounts","transactions","admins","staff","data","userReqData","id","Math","floor","random","email","String","userEmail","firstName","userFirstName","lastName","userLastName","password","userPassword","type","accountType","isAdmin","userResData","parseInt","userId","bankAccountData","accountNumber","createdOn","Date","owner","ownerId","bankAccountType","status","bankAccountStatus","balance","parseFloat","bankAccountBalance","newBankAccountData","openingBalance","transactionData","transactionType","cashier","cashierId","amount","transactionAmount","oldBalance","accountBalance","newBalance","transactionResData","transactionId","adminStaff","username","staffInfo","testUserOne","testUserTwo","testUserOneData","userData","testUserTwoData","userDataList","push","testBankAccountOneData","testBankAccountTwoData","testBankAccountOne","bankAccount","testBankAccountTwo","testBankAccountList","testStaffOneData","testStaffTwoData","testStaffOne","staffData","testStaffTwo","testStaffList","testAdminOneData","testAdminTwoData","testAdminOne","adminStaffData","testAdminTwo","testAdminList","testTransactionOneData","testTransactionTwoData","testTransactionOne","transaction","testTransactionTwo","testTransactionList","banka","UserList","bankAccountList","staffList","adminList","transactionList"],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAMA,K;;;AACJ,mBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;;;6BAEQC,I,EAAM;AACb,WAAKC,WAAL,GAAmB;AACjBC,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,gBAA3B,CADa;AAEjBC,QAAAA,KAAK,EAAEC,MAAM,CAACP,IAAI,CAACQ,SAAN,CAFI;AAGjBC,QAAAA,SAAS,EAAEF,MAAM,CAACP,IAAI,CAACU,aAAN,CAHA;AAIjBC,QAAAA,QAAQ,EAAEJ,MAAM,CAACP,IAAI,CAACY,YAAN,CAJC;AAKjBC,QAAAA,QAAQ,EAAEN,MAAM,CAACP,IAAI,CAACc,YAAN,CALC;AAMjBC,QAAAA,IAAI,EAAER,MAAM,CAACP,IAAI,CAACgB,WAAN,CANK;AAOjBC,QAAAA,OAAO,EAAE;AAPQ,OAAnB;AASA,aAAO,KAAKhB,WAAZ;AACD;;;2CAEsBD,I,EAAM;AAC3B,WAAKkB,WAAL,GAAmB;AACjBhB,QAAAA,EAAE,EAAEiB,QAAQ,CAACnB,IAAI,CAACoB,MAAN,EAAc,EAAd,CADK;AAEjBX,QAAAA,SAAS,EAAEF,MAAM,CAACP,IAAI,CAACU,aAAN,CAFA;AAGjBC,QAAAA,QAAQ,EAAEJ,MAAM,CAACP,IAAI,CAACY,YAAN,CAHC;AAIjBN,QAAAA,KAAK,EAAEC,MAAM,CAACP,IAAI,CAACQ,SAAN;AAJI,OAAnB;AAMA,aAAO,KAAKU,WAAZ;AACD;;;gCAEWlB,I,EAAM;AAChB,WAAKqB,eAAL,GAAuB;AACrBnB,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,gBAA3B,CADiB;AAErBiB,QAAAA,aAAa,EAAEnB,IAAI,CAACC,KAAL,CAAW,aAAaD,IAAI,CAACE,MAAL,KAAgB,UAAxC,CAFM;AAGrBkB,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAHU;AAIrBC,QAAAA,KAAK,EAAEN,QAAQ,CAACnB,IAAI,CAAC0B,OAAN,EAAe,EAAf,CAJM;AAKrBX,QAAAA,IAAI,EAAER,MAAM,CAACP,IAAI,CAAC2B,eAAN,CALS;AAMrBC,QAAAA,MAAM,EAAErB,MAAM,CAACP,IAAI,CAAC6B,iBAAN,CANO;AAOrBC,QAAAA,OAAO,EAAEC,UAAU,CAAC/B,IAAI,CAACgC,kBAAN;AAPE,OAAvB;AASA,aAAO,KAAKX,eAAZ;AACD;;;8CAEyBrB,I,EAAM;AAC9B,WAAKiC,kBAAL,GAA0B;AACxBX,QAAAA,aAAa,EAAEH,QAAQ,CAACnB,IAAI,CAACoB,MAAN,EAAc,EAAd,CADC;AAExBX,QAAAA,SAAS,EAAEF,MAAM,CAACP,IAAI,CAACU,aAAN,CAFO;AAGxBC,QAAAA,QAAQ,EAAEJ,MAAM,CAACP,IAAI,CAACY,YAAN,CAHQ;AAIxBN,QAAAA,KAAK,EAAEC,MAAM,CAACP,IAAI,CAACQ,SAAN,CAJW;AAKxBO,QAAAA,IAAI,EAAER,MAAM,CAACP,IAAI,CAAC2B,eAAN,CALY;AAMxBO,QAAAA,cAAc,EAAEH,UAAU,CAAC/B,IAAI,CAACgC,kBAAN;AANF,OAA1B;AAQA,aAAO,KAAKC,kBAAZ;AACD;;;gCAEWjC,I,EAAM;AAChB,WAAKmC,eAAL,GAAuB;AACrBjC,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,gBAA3B,CADiB;AAErBkB,QAAAA,SAAS,EAAE,IAAIC,IAAJ,EAFU;AAGrBT,QAAAA,IAAI,EAAER,MAAM,CAACP,IAAI,CAACoC,eAAN,CAHS;AAIrBd,QAAAA,aAAa,EAAEH,QAAQ,CAACnB,IAAI,CAACsB,aAAN,EAAqB,EAArB,CAJF;AAKrBe,QAAAA,OAAO,EAAElB,QAAQ,CAACnB,IAAI,CAACsC,SAAN,EAAiB,EAAjB,CALI;AAMrBC,QAAAA,MAAM,EAAER,UAAU,CAAC/B,IAAI,CAACwC,iBAAN,CANG;AAOrBC,QAAAA,UAAU,EAAEV,UAAU,CAAC/B,IAAI,CAAC0C,cAAN,CAPD;AAQrBC,QAAAA,UAAU,EAAEZ,UAAU,CAAC/B,IAAI,CAAC0C,cAAN,CAAV,GAAkCX,UAAU,CAAC/B,IAAI,CAACwC,iBAAN;AARnC,OAAvB;AAUA,aAAO,KAAKL,eAAZ;AACD;;;uCAEkBnC,I,EAAM;AACvB,WAAK4C,kBAAL,GAA0B;AACxBC,QAAAA,aAAa,EAAE1B,QAAQ,CAACnB,IAAI,CAAC6C,aAAN,EAAqB,EAArB,CADC;AAExBvB,QAAAA,aAAa,EAAEf,MAAM,CAACP,IAAI,CAACsB,aAAN,CAFG;AAGxBiB,QAAAA,MAAM,EAAER,UAAU,CAAC/B,IAAI,CAACwC,iBAAN,CAHM;AAIxBH,QAAAA,OAAO,EAAElB,QAAQ,CAACnB,IAAI,CAACsC,SAAN,EAAiB,EAAjB,CAJO;AAKxBF,QAAAA,eAAe,EAAE7B,MAAM,CAACP,IAAI,CAACoC,eAAN,CALC;AAMxBM,QAAAA,cAAc,EAAEnC,MAAM,CAACP,IAAI,CAAC0C,cAAL,GAAsB1C,IAAI,CAACwC,iBAA5B;AANE,OAA1B;AAQA,aAAO,KAAKI,kBAAZ;AACD;;;mCAEc5C,I,EAAM;AACnB,WAAK8C,UAAL,GAAkB;AAChB5C,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,gBAA3B,CADY;AAEhB0C,QAAAA,QAAQ,EAAExC,MAAM,CAACP,IAAI,CAAC+C,QAAN,CAFA;AAGhBlC,QAAAA,QAAQ,EAAEN,MAAM,CAACP,IAAI,CAACa,QAAN,CAHA;AAIhBI,QAAAA,OAAO,EAAE;AAJO,OAAlB;AAMA,aAAO,KAAK6B,UAAZ;AACD;;;8BAES9C,I,EAAM;AACd,WAAKgD,SAAL,GAAiB;AACf9C,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,gBAA3B,CADW;AAEf0C,QAAAA,QAAQ,EAAExC,MAAM,CAACP,IAAI,CAAC+C,QAAN,CAFD;AAGflC,QAAAA,QAAQ,EAAEN,MAAM,CAACP,IAAI,CAACa,QAAN,CAHD;AAIfE,QAAAA,IAAI,EAAER,MAAM,CAACP,IAAI,CAACgB,WAAN,CAJG;AAKfC,QAAAA,OAAO,EAAE;AALM,OAAjB;AAOA,aAAO,KAAK+B,SAAZ;AACD;;;+BAEU;AAAA;;AACT,WAAKC,WAAL,GAAmB;AACjBzC,QAAAA,SAAS,EAAE,YADM;AAEjBE,QAAAA,aAAa,EAAE,KAFE;AAGjBE,QAAAA,YAAY,EAAE,KAHG;AAIjBE,QAAAA,YAAY,EAAE,gBAJG;AAKjBE,QAAAA,WAAW,EAAE;AALI,OAAnB;AAQA,WAAKkC,WAAL,GAAmB;AACjB1C,QAAAA,SAAS,EAAE,YADM;AAEjBE,QAAAA,aAAa,EAAE,KAFE;AAGjBE,QAAAA,YAAY,EAAE,KAHG;AAIjBE,QAAAA,YAAY,EAAE,gBAJG;AAKjBE,QAAAA,WAAW,EAAE;AALI,OAAnB;AAQA,WAAKmC,eAAL,GAAuB,KAAKC,QAAL,CAAc,KAAKH,WAAnB,CAAvB;AACA,WAAKI,eAAL,GAAuB,KAAKD,QAAL,CAAc,KAAKF,WAAnB,CAAvB;AACA,WAAKI,YAAL,GAAoB,CAAC,KAAKH,eAAN,EAAuB,KAAKE,eAA5B,CAApB;;AACA,0BAAK1D,KAAL,EAAW4D,IAAX,uCAAmB,KAAKD,YAAxB;AACD;;;sCAEiB;AAAA;;AAChB,WAAKE,sBAAL,GAA8B;AAC5B9B,QAAAA,OAAO,EAAE,KAAKyB,eAAL,CAAqBjD,EADF;AAE5ByB,QAAAA,eAAe,EAAE,SAFW;AAG5BE,QAAAA,iBAAiB,EAAE,QAHS;AAI5BG,QAAAA,kBAAkB,EAAE;AAJQ,OAA9B;AAOA,WAAKyB,sBAAL,GAA8B;AAC5B/B,QAAAA,OAAO,EAAE,KAAK2B,eAAL,CAAqBnD,EADF;AAE5ByB,QAAAA,eAAe,EAAE,SAFW;AAG5BE,QAAAA,iBAAiB,EAAE,QAHS;AAI5BG,QAAAA,kBAAkB,EAAE;AAJQ,OAA9B;AAOA,WAAK0B,kBAAL,GAA0B,KAAKC,WAAL,CAAiB,KAAKH,sBAAtB,CAA1B;AACA,WAAKI,kBAAL,GAA0B,KAAKD,WAAL,CAAiB,KAAKF,sBAAtB,CAA1B;AACA,WAAKI,mBAAL,GAA2B,CAAC,KAAKH,kBAAN,EAA0B,KAAKE,kBAA/B,CAA3B;;AACA,iCAAKhE,YAAL,EAAkB2D,IAAlB,8CAA0B,KAAKM,mBAA/B;AACD;;;gCAEW;AAAA;;AACV,WAAKC,gBAAL,GAAwB;AACtBf,QAAAA,QAAQ,EAAE,QADY;AAEtBlC,QAAAA,QAAQ,EAAE,WAFY;AAGtBG,QAAAA,WAAW,EAAE;AAHS,OAAxB;AAMA,WAAK+C,gBAAL,GAAwB;AACtBhB,QAAAA,QAAQ,EAAE,QADY;AAEtBlC,QAAAA,QAAQ,EAAE,WAFY;AAGtBG,QAAAA,WAAW,EAAE;AAHS,OAAxB;AAMA,WAAKgD,YAAL,GAAoB,KAAKC,SAAL,CAAe,KAAKH,gBAApB,CAApB;AACA,WAAKI,YAAL,GAAoB,KAAKD,SAAL,CAAe,KAAKF,gBAApB,CAApB;AACA,WAAKI,aAAL,GAAqB,CAAC,KAAKH,YAAN,EAAoB,KAAKE,YAAzB,CAArB;;AACA,0BAAKnE,KAAL,EAAWwD,IAAX,uCAAmB,KAAKY,aAAxB;AACD;;;gCAEW;AAAA;;AACV,WAAKC,gBAAL,GAAwB;AACtBrB,QAAAA,QAAQ,EAAE,QADY;AAEtBlC,QAAAA,QAAQ,EAAE;AAFY,OAAxB;AAKA,WAAKwD,gBAAL,GAAwB;AACtBtB,QAAAA,QAAQ,EAAE,QADY;AAEtBlC,QAAAA,QAAQ,EAAE;AAFY,OAAxB;AAKA,WAAKyD,YAAL,GAAoB,KAAKC,cAAL,CAAoB,KAAKH,gBAAzB,CAApB;AACA,WAAKI,YAAL,GAAoB,KAAKD,cAAL,CAAoB,KAAKF,gBAAzB,CAApB;AACA,WAAKI,aAAL,GAAqB,CAAC,KAAKH,YAAN,EAAoB,KAAKE,YAAzB,CAArB;;AACA,2BAAK1E,MAAL,EAAYyD,IAAZ,wCAAoB,KAAKkB,aAAzB;AACD;;;sCAEiB;AAAA;;AAChB,WAAKC,sBAAL,GAA8B;AAC5BtC,QAAAA,eAAe,EAAE,QADW;AAE5Bd,QAAAA,aAAa,EAAE,KAAKoC,kBAAL,CAAwBpC,aAFX;AAG5BgB,QAAAA,SAAS,EAAE,KAAK0B,YAAL,CAAkB9D,EAHD;AAI5BsC,QAAAA,iBAAiB,EAAE,OAJS;AAK5BE,QAAAA,cAAc,EAAE,KAAKgB,kBAAL,CAAwB5B;AALZ,OAA9B;AAQA,WAAK6C,sBAAL,GAA8B;AAC5BvC,QAAAA,eAAe,EAAE,OADW;AAE5Bd,QAAAA,aAAa,EAAE,KAAKsC,kBAAL,CAAwBtC,aAFX;AAG5BgB,QAAAA,SAAS,EAAE,KAAK4B,YAAL,CAAkBhE,EAHD;AAI5BsC,QAAAA,iBAAiB,EAAE,OAJS;AAK5BE,QAAAA,cAAc,EAAE,KAAKkB,kBAAL,CAAwB9B;AALZ,OAA9B;AAQA,WAAK8C,kBAAL,GAA0B,KAAKC,WAAL,CAAiB,KAAKH,sBAAtB,CAA1B;AACA,WAAKI,kBAAL,GAA0B,KAAKD,WAAL,CAAiB,KAAKF,sBAAtB,CAA1B;AACA,WAAKI,mBAAL,GAA2B,CAAC,KAAKH,kBAAN,EAA0B,KAAKE,kBAA/B,CAA3B;;AACA,iCAAKjF,YAAL,EAAkB0D,IAAlB,8CAA0B,KAAKwB,mBAA/B;AACD;;;;;;AAGH,IAAMC,KAAK,GAAG,IAAItF,KAAJ,EAAd;AAEAsF,KAAK,CAACC,QAAN;AACAD,KAAK,CAACE,eAAN;AACAF,KAAK,CAACG,SAAN;AACAH,KAAK,CAACI,SAAN;AACAJ,KAAK,CAACK,eAAN;eAEeL,K","sourcesContent":["class Banka {\n  constructor() {\n    this.users = [];\n    this.bankAccounts = [];\n    this.transactions = [];\n    this.admins = [];\n    this.staff = [];\n  }\n\n  userData(data) {\n    this.userReqData = {\n      id: Math.floor(Math.random() * 1000000000000000),\n      email: String(data.userEmail),\n      firstName: String(data.userFirstName),\n      lastName: String(data.userLastName),\n      password: String(data.userPassword),\n      type: String(data.accountType),\n      isAdmin: false,\n    };\n    return this.userReqData;\n  }\n\n  createUserDataResponse(data) {\n    this.userResData = {\n      id: parseInt(data.userId, 10),\n      firstName: String(data.userFirstName),\n      lastName: String(data.userLastName),\n      email: String(data.userEmail),\n    };\n    return this.userResData;\n  }\n\n  bankAccount(data) {\n    this.bankAccountData = {\n      id: Math.floor(Math.random() * 1000000000000000),\n      accountNumber: Math.floor(1000000000 + Math.random() * 9000000000),\n      createdOn: new Date(),\n      owner: parseInt(data.ownerId, 10),\n      type: String(data.bankAccountType),\n      status: String(data.bankAccountStatus),\n      balance: parseFloat(data.bankAccountBalance),\n    };\n    return this.bankAccountData;\n  }\n\n  createBankAccountResponse(data) {\n    this.newBankAccountData = {\n      accountNumber: parseInt(data.userId, 10),\n      firstName: String(data.userFirstName),\n      lastName: String(data.userLastName),\n      email: String(data.userEmail),\n      type: String(data.bankAccountType),\n      openingBalance: parseFloat(data.bankAccountBalance),\n    };\n    return this.newBankAccountData;\n  }\n\n  transaction(data) {\n    this.transactionData = {\n      id: Math.floor(Math.random() * 1000000000000000),\n      createdOn: new Date(),\n      type: String(data.transactionType),\n      accountNumber: parseInt(data.accountNumber, 10),\n      cashier: parseInt(data.cashierId, 10),\n      amount: parseFloat(data.transactionAmount),\n      oldBalance: parseFloat(data.accountBalance),\n      newBalance: parseFloat(data.accountBalance) - parseFloat(data.transactionAmount),\n    };\n    return this.transactionData;\n  }\n\n  processTransaction(data) {\n    this.transactionResData = {\n      transactionId: parseInt(data.transactionId, 10),\n      accountNumber: String(data.accountNumber),\n      amount: parseFloat(data.transactionAmount),\n      cashier: parseInt(data.cashierId, 10),\n      transactionType: String(data.transactionType),\n      accountBalance: String(data.accountBalance - data.transactionAmount),\n    };\n    return this.transactionResData;\n  }\n\n  adminStaffData(data) {\n    this.adminStaff = {\n      id: Math.floor(Math.random() * 1000000000000000),\n      username: String(data.username),\n      password: String(data.password),\n      isAdmin: true,\n    };\n    return this.adminStaff;\n  }\n\n  staffData(data) {\n    this.staffInfo = {\n      id: Math.floor(Math.random() * 1000000000000000),\n      username: String(data.username),\n      password: String(data.password),\n      type: String(data.accountType),\n      isAdmin: false,\n    };\n    return this.staffInfo;\n  }\n\n  UserList() {\n    this.testUserOne = {\n      userEmail: 'foobar@com',\n      userFirstName: 'Foo',\n      userLastName: 'Bar',\n      userPassword: 'Abcderg13#isfg',\n      accountType: 'Client',\n    };\n\n    this.testUserTwo = {\n      userEmail: 'barfoo@com',\n      userFirstName: 'Bar',\n      userLastName: 'Foo',\n      userPassword: 'Abcderg13#isfg',\n      accountType: 'Client',\n    };\n\n    this.testUserOneData = this.userData(this.testUserOne);\n    this.testUserTwoData = this.userData(this.testUserTwo);\n    this.userDataList = [this.testUserOneData, this.testUserTwoData];\n    this.users.push(...this.userDataList);\n  }\n\n  bankAccountList() {\n    this.testBankAccountOneData = {\n      ownerId: this.testUserOneData.id,\n      bankAccountType: 'Savings',\n      bankAccountStatus: 'Active',\n      bankAccountBalance: '1000000',\n    };\n\n    this.testBankAccountTwoData = {\n      ownerId: this.testUserTwoData.id,\n      bankAccountType: 'Current',\n      bankAccountStatus: 'Active',\n      bankAccountBalance: '150000',\n    };\n\n    this.testBankAccountOne = this.bankAccount(this.testBankAccountOneData);\n    this.testBankAccountTwo = this.bankAccount(this.testBankAccountTwoData);\n    this.testBankAccountList = [this.testBankAccountOne, this.testBankAccountTwo];\n    this.bankAccounts.push(...this.testBankAccountList);\n  }\n\n  staffList() {\n    this.testStaffOneData = {\n      username: 'FooBar',\n      password: '12345ABC#',\n      accountType: 'staff',\n    };\n\n    this.testStaffTwoData = {\n      username: 'BarFoo',\n      password: '12345ABC#',\n      accountType: 'staff',\n    };\n\n    this.testStaffOne = this.staffData(this.testStaffOneData);\n    this.testStaffTwo = this.staffData(this.testStaffTwoData);\n    this.testStaffList = [this.testStaffOne, this.testStaffTwo];\n    this.staff.push(...this.testStaffList);\n  }\n\n  adminList() {\n    this.testAdminOneData = {\n      username: 'FooBar',\n      password: '12345ABC#',\n    };\n\n    this.testAdminTwoData = {\n      username: 'BarFoo',\n      password: '12345ABC#',\n    };\n\n    this.testAdminOne = this.adminStaffData(this.testAdminOneData);\n    this.testAdminTwo = this.adminStaffData(this.testAdminTwoData);\n    this.testAdminList = [this.testAdminOne, this.testAdminTwo];\n    this.admins.push(...this.testAdminList);\n  }\n\n  transactionList() {\n    this.testTransactionOneData = {\n      transactionType: 'Credit',\n      accountNumber: this.testBankAccountOne.accountNumber,\n      cashierId: this.testStaffOne.id,\n      transactionAmount: '10000',\n      accountBalance: this.testBankAccountOne.balance,\n    };\n\n    this.testTransactionTwoData = {\n      transactionType: 'Debit',\n      accountNumber: this.testBankAccountTwo.accountNumber,\n      cashierId: this.testStaffTwo.id,\n      transactionAmount: '14000',\n      accountBalance: this.testBankAccountTwo.balance,\n    };\n\n    this.testTransactionOne = this.transaction(this.testTransactionOneData);\n    this.testTransactionTwo = this.transaction(this.testTransactionTwoData);\n    this.testTransactionList = [this.testTransactionOne, this.testTransactionTwo];\n    this.transactions.push(...this.testTransactionList);\n  }\n}\n\nconst banka = new Banka();\n\nbanka.UserList();\nbanka.bankAccountList();\nbanka.staffList();\nbanka.adminList();\nbanka.transactionList();\n\nexport default banka;\n"],"file":"index.js"}